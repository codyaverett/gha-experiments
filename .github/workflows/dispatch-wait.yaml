# Pattern 2: Repository Dispatch Waiting
# .github/workflows/dispatch-wait.yml
name: Dispatch Wait Pattern

on:
  workflow_dispatch:
    inputs:
      wait_id:
        description: 'Unique ID for this wait'
        required: true

  repository_dispatch:
    types: 
      - approval-received
      - test-completed
      - external-system-ready

jobs:
  start-and-wait:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Initialize waiting state
      run: |
        echo "Starting process with ID: ${{ github.event.inputs.wait_id }}"
        echo "Workflow will resume when approval-received event is sent"

    - name: Store state (optional)
      uses: actions/github-script@v7
      with:
        script: |
          // You could store state in issues, gists, or external systems
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Waiting for approval: ${{ github.event.inputs.wait_id }}',
            body: `Workflow run: ${context.runId}\nWaiting for external approval.`,
            labels: ['waiting-approval', 'automation']
          });

  resume-after-dispatch:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'repository_dispatch' && 
      github.event.action == 'approval-received'
    steps:
    - name: Resume workflow
      run: |
        echo "Approval received!"
        echo "Wait ID: ${{ github.event.client_payload.wait_id }}"
        echo "Approved by: ${{ github.event.client_payload.approved_by }}"

    - name: Clean up waiting state
      uses: actions/github-script@v7
      with:
        script: |
          // Find and close the waiting issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'waiting-approval',
            state: 'open'
          });
          
          for (const issue of issues.data) {
            if (issue.title.includes('${{ github.event.client_payload.wait_id }}')) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
          }


